
function mpc_config(this_block)

  % Revision History:
  %
  %   07-Aug-2025  (11:52 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Users\Fourier\Documents\fa\mpc_imp_obs\impw21\mpc.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('mpc');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('ap_rst');
  this_block.addSimulinkInport('ap_start');
  this_block.addSimulinkInport('r');
  this_block.addSimulinkInport('x0_q0');
  this_block.addSimulinkInport('x0_q1');

  this_block.addSimulinkOutport('ap_done');
  this_block.addSimulinkOutport('ap_idle');
  this_block.addSimulinkOutport('ap_ready');
  this_block.addSimulinkOutport('x0_address0');
  this_block.addSimulinkOutport('x0_ce0');
  this_block.addSimulinkOutport('x0_address1');
  this_block.addSimulinkOutport('x0_ce1');
  this_block.addSimulinkOutport('u0');
  this_block.addSimulinkOutport('u0_ap_vld');

  ap_done_port = this_block.port('ap_done');
  ap_done_port.setType('UFix_1_0');
  ap_done_port.useHDLVector(false);
  ap_idle_port = this_block.port('ap_idle');
  ap_idle_port.setType('UFix_1_0');
  ap_idle_port.useHDLVector(false);
  ap_ready_port = this_block.port('ap_ready');
  ap_ready_port.setType('UFix_1_0');
  ap_ready_port.useHDLVector(false);
  x0_address0_port = this_block.port('x0_address0');
  x0_address0_port.setType('UFix_1_0');
  x0_ce0_port = this_block.port('x0_ce0');
  x0_ce0_port.setType('UFix_1_0');
  x0_ce0_port.useHDLVector(false);
  x0_address1_port = this_block.port('x0_address1');
  x0_address1_port.setType('UFix_1_0');
  x0_ce1_port = this_block.port('x0_ce1');
  x0_ce1_port.setType('UFix_1_0');
  x0_ce1_port.useHDLVector(false);
  u0_port = this_block.port('u0');
  u0_port.setType('Fix_21_14');
  u0_ap_vld_port = this_block.port('u0_ap_vld');
  u0_ap_vld_port.setType('UFix_1_0');
  u0_ap_vld_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('ap_rst').width ~= 1);
      this_block.setError('Input data type for port "ap_rst" must have width=1.');
    end

    this_block.port('ap_rst').useHDLVector(false);

    if (this_block.port('ap_start').width ~= 1);
      this_block.setError('Input data type for port "ap_start" must have width=1.');
    end

    this_block.port('ap_start').useHDLVector(false);

    if (this_block.port('r').width ~= 32);
      this_block.setError('Input data type for port "r" must have width=32.');
    end

    if (this_block.port('x0_q0').width ~= 21);
      this_block.setError('Input data type for port "x0_q0" must have width=21.');
    end

    if (this_block.port('x0_q1').width ~= 21);
      this_block.setError('Input data type for port "x0_q1" must have width=21.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('ap_ST_fsm_state1','integer','1');
  this_block.addGeneric('ap_ST_fsm_state2','integer','2');
  this_block.addGeneric('ap_ST_fsm_state3','integer','4');
  this_block.addGeneric('ap_ST_fsm_state4','integer','8');
  this_block.addGeneric('ap_ST_fsm_state5','integer','16');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

this_block.addFile('impw21/mpc_mul_mul_21s_6ns_28_4_1_DSP48_7.v');
this_block.addFile('impw21/mpc_mul_mul_21s_6ns_28_4_1.v');
this_block.addFile('impw21/mpc_mul_21ns_21s_42_1_1.v');
this_block.addFile('impw21/mpc_vsub_18_ap_fixed_21_7_0_0_0_s.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_vsub_row1_d_V_ROM_AUTO_1R.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_mvmult_row_E_V_1_ROM_AUTO_1R.v');
this_block.addFile('impw21/mpc_h_V_RAM_AUTO_1R1W.v');
this_block.addFile('impw21/mpc_mul_mul_21s_14ns_35_4_1_DSP48_0.v');
this_block.addFile('impw21/mpc_mul_mul_21s_14ns_35_4_1.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_temp_V_RAM_AUTO_1R1W.v');
this_block.addFile('impw21/mpc_mul_mul_21s_15s_36_4_1_DSP48_10.v');
this_block.addFile('impw21/mpc_mul_mul_21s_15s_36_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_14s_35_4_1_DSP48_2.v');
this_block.addFile('impw21/mpc_mul_mul_21s_14s_35_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_7s_28_4_1_DSP48_3.v');
this_block.addFile('impw21/mpc_mul_mul_21s_7s_28_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_9s_30_4_1_DSP48_5.v');
this_block.addFile('impw21/mpc_mul_mul_21s_9s_30_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_15ns_36_4_1_DSP48_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_15ns_36_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_7ns_29_4_1_DSP48_13.v');
this_block.addFile('impw21/mpc_mul_mul_21s_7ns_29_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_12ns_34_4_1_DSP48_8.v');
this_block.addFile('impw21/mpc_mul_mul_21s_12ns_34_4_1.v');
this_block.addFile('impw21/mpc_mux_32_21_1_1.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_vsub_row_e_V_ROM_AUTO_1R.v');
this_block.addFile('impw21/mpc_qp_admm_zk_admm_V_RAM_AUTO_1R1W.v');
this_block.addFile('impw21/mpc_qp_admm_temp_RAM_AUTO_1R1W.v');
this_block.addFile('impw21/mpc_mul_mul_21s_14ns_36_4_1_DSP48_11.v');
this_block.addFile('impw21/mpc_mul_mul_21s_14ns_36_4_1.v');
this_block.addFile('impw21/mpc_flow_control_loop_pipe_sequential_init.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_constraint1.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_vsub_row.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_vsub_row1.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_constraint3.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_vmmult_column.v');
this_block.addFile('impw21/mpc_mul_mul_21s_13ns_35_4_1_DSP48_6.v');
this_block.addFile('impw21/mpc_mul_mul_21s_13ns_35_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_10s_31_4_1_DSP48_12.v');
this_block.addFile('impw21/mpc_mul_mul_21s_10s_31_4_1.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_constraint2.v');
this_block.addFile('impw21/mpc_mul_mul_21s_8s_29_4_1_DSP48_14.v');
this_block.addFile('impw21/mpc_mul_mul_21s_8s_29_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_8ns_30_4_1_DSP48_9.v');
this_block.addFile('impw21/mpc_mul_mul_21s_8ns_30_4_1.v');
this_block.addFile('impw21/mpc_mul_mul_21s_13s_34_4_1_DSP48_4.v');
this_block.addFile('impw21/mpc_mul_mul_21s_13s_34_4_1.v');
this_block.addFile('impw21/mpc_qp_admm.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_mvmult_row_E_V_0_ROM_AUTO_1R.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_mvmult_row.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint_Pipeline_constraint4.v');
this_block.addFile('impw21/mpc_mpc_dense_constraint.v');
this_block.addFile('impw21/mpc.v');


return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

