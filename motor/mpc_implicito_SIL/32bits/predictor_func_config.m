
function predictor_func_config(this_block)

  % Revision History:
  %
  %   15-Oct-2024  (14:02 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Users\fabus\Documents\model_composer_test\mpc_implicito1\predictor\predictor_func.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('predictor_func');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('ap_rst');
  this_block.addSimulinkInport('ap_start');
  this_block.addSimulinkInport('xhat_q0');
  this_block.addSimulinkInport('xhat_q1');
  this_block.addSimulinkInport('uk');

  this_block.addSimulinkOutport('ap_done');
  this_block.addSimulinkOutport('ap_idle');
  this_block.addSimulinkOutport('ap_ready');
  this_block.addSimulinkOutport('xhat_address0');
  this_block.addSimulinkOutport('xhat_ce0');
  this_block.addSimulinkOutport('xhat_address1');
  this_block.addSimulinkOutport('xhat_ce1');
  this_block.addSimulinkOutport('yhat');
  this_block.addSimulinkOutport('yhat_ap_vld');

  ap_done_port = this_block.port('ap_done');
  ap_done_port.setType('UFix_1_0');
  ap_done_port.useHDLVector(false);

  ap_idle_port = this_block.port('ap_idle');
  ap_idle_port.setType('UFix_1_0');
  ap_idle_port.useHDLVector(false);

  ap_ready_port = this_block.port('ap_ready');
  ap_ready_port.setType('UFix_1_0');
  ap_ready_port.useHDLVector(false);

  xhat_address0_port = this_block.port('xhat_address0');
  xhat_address0_port.setType('UFix_1_0');

  xhat_ce0_port = this_block.port('xhat_ce0');
  xhat_ce0_port.setType('UFix_1_0');
  xhat_ce0_port.useHDLVector(false);

  xhat_address1_port = this_block.port('xhat_address1');
  xhat_address1_port.setType('UFix_1_0');

  xhat_ce1_port = this_block.port('xhat_ce1');
  xhat_ce1_port.setType('UFix_1_0');
  xhat_ce1_port.useHDLVector(false);

  yhat_port = this_block.port('yhat');
  yhat_port.setType('Fix_64_32');

  yhat_ap_vld_port = this_block.port('yhat_ap_vld');
  yhat_ap_vld_port.setType('UFix_1_0');
  yhat_ap_vld_port.useHDLVector(false);


  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('ap_rst').width ~= 1)
      this_block.setError('Input data type for port "ap_rst" must have width=1.');
    end

    this_block.port('ap_rst').useHDLVector(false);

    if (this_block.port('ap_start').width ~= 1)
      this_block.setError('Input data type for port "ap_start" must have width=1.');
    end

    this_block.port('ap_start').useHDLVector(false);

    if (this_block.port('xhat_q0').width ~= 64)
      this_block.setError('Input data type for port "xhat_q0" must have width=64.');
    end

    if (this_block.port('xhat_q1').width ~= 64)
      this_block.setError('Input data type for port "xhat_q1" must have width=64.');
    end

    if (this_block.port('uk').width ~= 64)
      this_block.setError('Input data type for port "uk" must have width=64.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  % NOTE: Use the "convertArrayType" API in case of real_vector/integer_vector. 
  this_block.addGeneric('ap_ST_fsm_state1','integer','1');
  this_block.addGeneric('ap_ST_fsm_state2','integer','2');
  this_block.addGeneric('ap_ST_fsm_state3','integer','4');
  this_block.addGeneric('ap_ST_fsm_state4','integer','8');
  this_block.addGeneric('ap_ST_fsm_state5','integer','16');
  this_block.addGeneric('ap_ST_fsm_state6','integer','32');
  this_block.addGeneric('ap_ST_fsm_state7','integer','64');
  this_block.addGeneric('ap_ST_fsm_state8','integer','128');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

this_block.addFile('predictor/predictor_func_flow_control_loop_pipe_sequential_init.v');
this_block.addFile('predictor/predictor_func_mul_29s_64s_92_5_1.v');
this_block.addFile('predictor/predictor_func_mul_33s_64s_96_5_1.v');
this_block.addFile('predictor/predictor_func_predictor_func_Pipeline_mvmult_column.v');
this_block.addFile('predictor/predictor_func_predictor_func_Pipeline_mvmult_row.v');
this_block.addFile('predictor/predictor_func_predictor_func_Pipeline_mvmult_row1.v');
this_block.addFile('predictor/predictor_func_predictor_func_Pipeline_vadd_row.v');
 this_block.addFile('predictor/predictor_func.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 && uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

% This function converts the matlab array to VHDL array Style 
% and this is valid only in case of generic parameters. 
function arrayHDLType = convertArrayType(inArr) 
arrayHDLType = '';
for i=1:length(inArr)
    if (i == 1)
        arrayHDLType = [arrayHDLType '(' num2str(inArr(i))]; 
    elseif (i == length(inArr)) 
        arrayHDLType = [arrayHDLType ',' num2str(inArr(i)) ')']; 
    else 
        arrayHDLType = [arrayHDLType ',' num2str(inArr(i))]; 
    end 
end 
