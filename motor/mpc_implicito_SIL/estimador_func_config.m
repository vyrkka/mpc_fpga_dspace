
function estimador_func_config(this_block)

  % Revision History:
  %
  %   07-Aug-2025  (11:52 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Users\Fourier\Documents\fa\mpc_imp_obs\estw21\estimador_func.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('estimador_func');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('ap_rst');
  this_block.addSimulinkInport('ap_start');
  this_block.addSimulinkInport('zhat_prev_0');
  this_block.addSimulinkInport('zhat_prev_1');
  this_block.addSimulinkInport('zhat_prev_2');
  this_block.addSimulinkInport('uk');
  this_block.addSimulinkInport('yhat');
  this_block.addSimulinkInport('y');

  this_block.addSimulinkOutport('ap_done');
  this_block.addSimulinkOutport('ap_idle');
  this_block.addSimulinkOutport('ap_ready');
  this_block.addSimulinkOutport('zhat_next_0');
  this_block.addSimulinkOutport('zhat_next_0_ap_vld');
  this_block.addSimulinkOutport('zhat_next_1');
  this_block.addSimulinkOutport('zhat_next_1_ap_vld');
  this_block.addSimulinkOutport('zhat_next_2');
  this_block.addSimulinkOutport('zhat_next_2_ap_vld');

  ap_done_port = this_block.port('ap_done');
  ap_done_port.setType('UFix_1_0');
  ap_done_port.useHDLVector(false);
  ap_idle_port = this_block.port('ap_idle');
  ap_idle_port.setType('UFix_1_0');
  ap_idle_port.useHDLVector(false);
  ap_ready_port = this_block.port('ap_ready');
  ap_ready_port.setType('UFix_1_0');
  ap_ready_port.useHDLVector(false);
  zhat_next_0_port = this_block.port('zhat_next_0');
  zhat_next_0_port.setType('Fix_21_14');
  zhat_next_0_ap_vld_port = this_block.port('zhat_next_0_ap_vld');
  zhat_next_0_ap_vld_port.setType('UFix_1_0');
  zhat_next_0_ap_vld_port.useHDLVector(false);
  zhat_next_1_port = this_block.port('zhat_next_1');
  zhat_next_1_port.setType('Fix_21_14');
  zhat_next_1_ap_vld_port = this_block.port('zhat_next_1_ap_vld');
  zhat_next_1_ap_vld_port.setType('UFix_1_0');
  zhat_next_1_ap_vld_port.useHDLVector(false);
  zhat_next_2_port = this_block.port('zhat_next_2');
  zhat_next_2_port.setType('Fix_21_14');
  zhat_next_2_ap_vld_port = this_block.port('zhat_next_2_ap_vld');
  zhat_next_2_ap_vld_port.setType('UFix_1_0');
  zhat_next_2_ap_vld_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('ap_rst').width ~= 1);
      this_block.setError('Input data type for port "ap_rst" must have width=1.');
    end

    this_block.port('ap_rst').useHDLVector(false);

    if (this_block.port('ap_start').width ~= 1);
      this_block.setError('Input data type for port "ap_start" must have width=1.');
    end

    this_block.port('ap_start').useHDLVector(false);

    if (this_block.port('zhat_prev_0').width ~= 21);
      this_block.setError('Input data type for port "zhat_prev_0" must have width=21.');
    end

    if (this_block.port('zhat_prev_1').width ~= 21);
      this_block.setError('Input data type for port "zhat_prev_1" must have width=21.');
    end

    if (this_block.port('zhat_prev_2').width ~= 21);
      this_block.setError('Input data type for port "zhat_prev_2" must have width=21.');
    end

    if (this_block.port('uk').width ~= 32);
      this_block.setError('Input data type for port "uk" must have width=32.');
    end

    if (this_block.port('yhat').width ~= 32);
      this_block.setError('Input data type for port "yhat" must have width=32.');
    end

    if (this_block.port('y').width ~= 32);
      this_block.setError('Input data type for port "y" must have width=32.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('ap_ST_fsm_state1','integer','1');
  this_block.addGeneric('ap_ST_fsm_state2','integer','2');
  this_block.addGeneric('ap_ST_fsm_state3','integer','4');
  this_block.addGeneric('ap_ST_fsm_state4','integer','8');
  this_block.addGeneric('ap_ST_fsm_state5','integer','16');
  this_block.addGeneric('ap_ST_fsm_state6','integer','32');
  this_block.addGeneric('ap_ST_fsm_state7','integer','64');
  this_block.addGeneric('ap_ST_fsm_state8','integer','128');
  this_block.addGeneric('ap_ST_fsm_state9','integer','256');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

this_block.addFile('estw21/estimador_func_mux_32_21_1_1.v');
this_block.addFile('estw21/estimador_func_mul_21ns_21s_42_1_1.v');
this_block.addFile('estw21/estimador_func_flow_control_loop_pipe_sequential_init.v');
this_block.addFile('estw21/estimador_func_estimador_func_Pipeline_vadd_row.v');
this_block.addFile('estw21/estimador_func_estimador_func_Pipeline_vadd_row3.v');
this_block.addFile('estw21/estimador_func_estimador_func_Pipeline_mvmult_row.v');
this_block.addFile('estw21/estimador_func_mul_21s_21ns_42_1_1.v');
this_block.addFile('estw21/estimador_func_estimador_func_Pipeline_mvmult_row2.v');
this_block.addFile('estw21/estimador_func_mux_32_21_1_1_x.v');
this_block.addFile('estw21/estimador_func_estimador_func_Pipeline_VITIS_LOOP_66_1.v');
this_block.addFile('estw21/estimador_func_estimador_func_Pipeline_mvmult_row1.v');
this_block.addFile('estw21/estimador_func.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

